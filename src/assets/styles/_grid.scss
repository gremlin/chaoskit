//
// Variables
//

$column-count: 12 !default;
$row-selector: '.row' !default;
$column-selector: '.column' !default;
$blockgrid-selector: '.blockGrid' !default;
$offset-modifier: 'offset' !default;
$block-delimiter: '-' !default;
$element-delimiter: '-' !default;
$breakpoint-delimiter: \@ !default;

$gutter-spacing: $global-whitespace-regular !default;

$column-properties: 'flex-basis', 'max-width' !default;
$offset-properties: 'margin-left' !default;

@mixin percent-width($property, $columns, $count) {
  #{$property}: ((100% / $columns) * $count);
}

@mixin block-grid-width($property, $count) {
  #{$property}: ((100% / $count));
}

@mixin percent-offset($property, $columns, $count) {
  $single-column-width: ((100% / $columns) * 1);

  #{$property}: $single-column-width * $count;
}

@mixin queries($key, $global-queries) {
  $query: map-get($global-queries, $key);

  @media (min-width: #{$query}) {
    @content;
  }
}

@mixin columns(
  $selector: $column-selector,
  $properties: $column-properties,
  $columns: $column-count,
  $queries: $global-queries
) {
  // Default prop
  @for $i from 1 through $columns {
    #{$selector}#{$block-delimiter}#{$i} {
      @content;

      @each $prop in $properties {
        @include percent-width($prop, $columns, $i);
      }
    }
  }
  // Size modifiers
  @each $size in $global-breakpoint-sizes {
    @include queries($size, $global-queries) {
      @for $i from 1 through $columns {
        #{$selector}#{$block-delimiter}#{$i}#{$breakpoint-delimiter}#{$size} {
          @content;

          @each $prop in $properties {
            @include percent-width($prop, $columns, $i);
          }
        }
      }
    }
  }
}

@mixin grid-offsets(
  $selector: $column-selector,
  $modifier-selector: $offset-modifier,
  $properties: $offset-properties,
  $columns: $column-count,
  $queries: $global-queries
) {
  // Default prop
  @for $i from 1 through $columns {
    #{$selector}#{$block-delimiter}#{$modifier-selector}#{$block-delimiter}#{$i} {
      @content;

      @each $prop in $properties {
        @include percent-offset($prop, $columns, $i);
      }
    }
  }
  // Size modifiers
  @each $size in $global-breakpoint-sizes {
    @include queries($size, $global-queries) {
      @for $i from 1 through $columns {
        #{$selector}#{$block-delimiter}#{$modifier-selector}#{$block-delimiter}#{$i}#{$breakpoint-delimiter}#{$size} {
          @content;

          @each $prop in $properties {
            @include percent-offset($prop, $columns, $i);
          }
        }
      }
    }
  }
}

@mixin blockgrid(
  $selector: $blockgrid-selector,
  $properties: $column-properties,
  $columns: $column-count,
  $queries: $global-queries
) {
  // Default prop
  @for $i from 1 through $columns {
    #{$selector}#{$block-delimiter}#{$i} > * {
      @content;

      @each $prop in $properties {
        @include block-grid-width($prop, $i);
      }
    }
  }
  // Size modifiers
  @each $size in $global-breakpoint-sizes {
    @include queries($size, $global-queries) {
      @for $i from 1 through $columns {
        #{$selector}#{$block-delimiter}#{$i}#{$breakpoint-delimiter}#{$size}
          > * {
          @content;

          @each $prop in $properties {
            @include block-grid-width($prop, $i);
          }
        }
      }
    }
  }
}

//
// Component
//

@mixin grid() {
  // Additional row overrides
  // 1. Margin so wrapping columns have space
  // 2. Reset list-style to allow use of `<ul>`
  #{$row-selector} {
    @include trimChildren();

    display: flex;
    flex: 0 1 auto;
    flex-flow: row wrap;
    margin-left: (-$gutter-spacing);
    // 1
    margin-top: (-$gutter-spacing);
    // 2
    padding: 0;
    list-style: none;

    // 1. Default spacing/flex attributes
    // 2. Default child elements of row to 100% width until size modifiers kick-in
    > * {
      // 1
      padding-left: $gutter-spacing;
      padding-top: $gutter-spacing;
      // 2
      flex: 0 0 100%;
      max-width: 100%;
    }

    &--deepMatch {
      > * {
        display: flex;
        flex-wrap: wrap;

        > * {
          flex: none;
          width: 100%;
        }
      }
    }

    @if (mixin-exists(hook-grid-row)) {
      @include hook-grid-row();
    }
  }

  // Removes margin/padding around columns
  @include grid-breakpoints('#{$row-selector}--collapse') {
    margin-top: 0;
    margin-left: 0;

    > * {
      padding-top: 0;
      padding-left: 0;
    }
  }

  //
  // Gutter modifiers
  //

  // Large gutters
  @include grid-breakpoints('#{$row-selector}--largeGutter') {
    margin-top: (-$global-whitespace-large);
    margin-left: (-$global-whitespace-large);

    > * {
      padding-left: $global-whitespace-large;
      padding-top: $global-whitespace-large;
    }
  }

  // XL Gutters
  @include grid-breakpoints('#{$row-selector}--xlargeGutter') {
    margin-top: (-$global-whitespace-xlarge);
    margin-left: (-$global-whitespace-xlarge);

    > * {
      padding-left: $global-whitespace-xlarge;
      padding-top: $global-whitespace-xlarge;
    }
  }

  //
  // Ordering modifiers
  //

  // First
  @include grid-breakpoints('#{$column-selector}--first') {
    order: -1;
  }

  // Last
  @include grid-breakpoints('#{$column-selector}--last') {
    order: 1;
  }

  // Columns mixin
  @include columns();

  // Offset mixin
  @include grid-offsets();
}

//
// Component
//

@mixin blockGrid() {
  // 1. Reset padding/list-style when used in `ul` contexts
  // 2. Margin so wrapping columns have space
  #{$blockgrid-selector} {
    display: flex;
    flex: 0 1 auto;
    flex-flow: row wrap;
    // 1
    padding: 0;
    list-style: none;
    // 2
    margin: (-$gutter-spacing) 0 0 (-$gutter-spacing);

    // 1. Default spacing/flex attributes
    // 2. Default child elements of row to 100% width until size modifiers kick-in
    > * {
      @include trimChildren();

      // 1
      padding-left: $gutter-spacing;
      padding-top: $gutter-spacing;
      // 2
      flex: 0 0 100%;
      max-width: 100%;
    }

    &--deepMatch {
      > * {
        display: flex;
        flex-wrap: wrap;

        > * {
          flex: none;
          width: 100%;
        }
      }
    }

    @if (mixin-exists(hook-block-grid)) {
      @include hook-block-grid();
    }
  }

  // Removes margin/padding around columns
  @include grid-breakpoints('#{$blockgrid-selector}--collapse') {
    margin-top: 0;
    margin-left: 0;

    > * {
      padding-top: 0;
      padding-left: 0;
    }
  }

  // Large gutters
  @include grid-breakpoints('#{$blockgrid-selector}--largeGutter') {
    margin-top: (-$global-whitespace-large);
    margin-left: (-$global-whitespace-large);

    > * {
      padding-left: $global-whitespace-large;
      padding-top: $global-whitespace-large;
    }
  }

  // XL gutters
  @include grid-breakpoints('#{$blockgrid-selector}--xlargeGutter') {
    margin-top: (-$global-whitespace-xlarge);
    margin-left: (-$global-whitespace-xlarge);

    > * {
      padding-left: $global-whitespace-xlarge;
      padding-top: $global-whitespace-xlarge;
    }
  }

  // Block Grid mixin
  @include blockgrid();
}
