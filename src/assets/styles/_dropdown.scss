//
// Variables
//

$dropdown-arrow-size: 10px !default;
$dropdown-width: 200px !default;
$dropdown-width-small: 150px !default;

$dropdown-panel-padding: $global-whitespace-regular !default;

$dropdown-menu-link: $global-muted !default;
$dropdown-menu-link-hover: $global-font-color !default;
$dropdown-menu-link-active: $global-primary !default;

$dropdown-transition: 0.175 easeOutBack !default; // Brought over from JS component so we can match CSS transitions when needed

//
// Component
//

@mixin dropdown() {
  .dropdown {
    display: inline-block;
    position: relative;

    @if (mixin-exists(hook-dropdown)) {
      @include hook-dropdown();
    }
  }

  .dropdown-panel {
    @include trimChildren();

    background: $global-background;
    padding: $dropdown-panel-padding;
    position: absolute;
    color: $global-font-color; // Contrast override
    top: calc(100% + #{$global-whitespace-small});
    width: $dropdown-width;
    max-height: 400px;
    border: 1px solid $global-border;
    border-radius: $global-border-radius;
    text-align: left;
    z-index: 10;
    opacity: 0;
    transform: translateY(-$global-whitespace-small) scale(0.75);
    transform-origin: left top;
    box-shadow: $global-small-media-shadow;
    display: none;

    @if (mixin-exists(hook-dropdown-panel)) {
      @include hook-dropdown-panel();
    }

    // 1. Quirky calculation bug when `rotate()` is used
    &::before {
      content: '';
      size: $dropdown-arrow-size;
      position: absolute;
      top: ((-$dropdown-arrow-size / 2) - 1); // 1
      left: $dropdown-arrow-size;
      background: $global-background;
      transform: rotate(135deg);
      border-bottom-left-radius: $global-border-radius;
      border: 1px solid $global-border;
      border-right: 0;
      border-top: 0;
    }
  }

  .dropdown-panel--small {
    width: $dropdown-width-small;
  }

  .dropdown--center {
    .dropdown-panel {
      left: 50%;
      transform: translate(-50%, -$global-whitespace-small) scale(0.75);
      transform-origin: center top;

      &::before {
        left: 50%;
        margin-left: -5px;
      }
    }
  }

  .dropdown--right {
    .dropdown-panel {
      left: auto;
      right: 0;
      transform-origin: right top;

      &::before {
        left: auto;
        right: 10px;
      }
    }
  }

  .dropdown--up {
    .dropdown-panel {
      transform: translateY($global-whitespace-small) scale(0.75);
      transform-origin: left bottom;
      top: auto;
      bottom: calc(100% + #{$global-whitespace-small});

      // 1. Quirky calculation bug when `rotate()` is used
      &::before {
        top: auto;
        bottom: ((-$dropdown-arrow-size / 2) - 1); // 1
        transform: rotate(-45deg);
      }
    }

    &.dropdown--center {
      .dropdown-panel {
        transform: translate(-50%, $global-whitespace-small) scale(0.75);
        transform-origin: center bottom;
      }
    }

    &.dropdown--right {
      .dropdown-panel {
        transform-origin: right bottom;
      }
    }
  }

  .dropdown-menu {
    list-style: none;
    padding: 0;
    margin: 0;
    width: 100%;

    a {
      color: $dropdown-menu-link;
      display: block;
      padding: $global-whitespace-xsmall $global-whitespace-regular;
      margin: 0 (-$dropdown-panel-padding);

      &:hover,
      &:active {
        color: $dropdown-menu-link-hover;
        background: $global-panel-background;
      }

      &.is-active {
        color: $dropdown-menu-link-active;
        background: $global-panel-background;
      }
    }
  }

  @if (mixin-exists(hook-dropdown-misc)) {
    @include hook-dropdown-misc();
  }
}
