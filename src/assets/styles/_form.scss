//
// Variables
//

$form-transition: border-color 0.25s easeInOutCubic !default;
$form-placeholder-color: $global-muted !default;
$form-box-shadow: $global-box-shadow !default;
$form-focus-box-shadow-color: rgba($global-primary, 0.75) !default;
$form-focus-box-shadow: $global-box-shadow-offset $form-focus-box-shadow-color !default;
$form-focus-error-box-shadow: $global-box-shadow-offset
  rgba($global-danger, 0.75) !default;
$form-focus-border-color: $global-primary !default;
$form-padding-horizontal: $global-ui-offset !default;

$form-font-color: $global-font-color !default;
$form-font-size: $global-font-size !default;

$form-border-width: 1px !default;
$form-height: $global-height !default;
$form-line-height: ($form-height - ($form-border-width * 2)) !default;

$form-background: $global-background !default;
$form-disabled-background: $global-panel-background !default;

$form-legend-spacing: $global-whitespace-small !default;
$form-legend-line-background: $global-border !default;
$form-legend-line-thickness: 1px !default;
$form-legend-line-space: $global-whitespace-xsmall !default;

$form-textarea-padding: $global-whitespace-small $form-padding-horizontal !default;
$form-textarea-min-height: ($global-height * 2) !default;
$form-textarea-max-height: 300px !default;

$form-radio-label-spacing: $global-whitespace-small !default;
$form-radio-size: 22px !default;
$form-radio-icon-size: 8px !default;

$form-checkbox-label-spacing: $global-whitespace-small !default;
$form-checkbox-size: 22px !default;
$form-checkbox-icon-size: 12px !default;

$form-select-arrow-color: $form-placeholder-color !default;
$form-select-arrow-icon-size: 12px !default;
$forms-select-arrow-right-padding: (
  $form-select-arrow-icon-size + $form-padding-horizontal +
  $global-whitespace-small
) !default;
$form-select-arrow-surround-padding: 0 $forms-select-arrow-right-padding 0
  $form-padding-horizontal !default;
$form-select-multiple-max-height: 150px !default;

$form-label-icon-size: 9px !default;

$form-contrast-enable: false !default;
$form-contrast-input-enable: true !default;
$form-contrast-input-prefix-enable: true !default;
$form-contrast-select-enable: true !default;
$form-contrast-radio-enable: true !default;
$form-contrast-checkbox-enable: true !default;
$form-contrast-focus-box-shadow: 0 0 2px rgba($global-contrast, 0.3) !default;
$form-contrast-background: rgba($global-contrast, 0.1) !default;
$form-contrast-background-focus: transparent !default;

//
// Icons
//

@svg-load form-select-caret-down url('caret-down.svg') {
  .icon-stroke {
    stroke: $form-select-arrow-color;
  }
}

@svg-load form-select-caret-down-contrast url('caret-down.svg') {
  .icon-stroke {
    stroke: $global-contrast;
  }
}

@svg-load form-required url('asterisk.svg') {
  .icon-stroke {
    stroke: $global-danger;
  }
}

@svg-load form-valid url('check.svg') {
  .icon-stroke {
    stroke: $global-primary;
  }
}

@svg-load form-notValid url('close.svg') {
  .icon-stroke {
    stroke: $global-danger;
  }
}

@svg-load form-check url('check.svg') {
  .icon-stroke {
    stroke: $global-primary;
  }
}

@svg-load form-check-contrast url('check.svg') {
  .icon-stroke {
    stroke: $global-contrast;
  }
}

//
// Mixins
//

// 1. Must be `height` because `min-height` is not working in OSX
// 2. Responsiveness: Sets a maximum width relative to the parent to scale on narrower viewports
// 3. Vertical `padding` needed for `select` elements in Firefox
// 4. Style
@mixin form-input-styles {
  // 1
  height: $form-height;
  // 2
  max-width: 100%;
  // 3
  padding: 0 $form-padding-horizontal;
  // 4
  border: 1px solid $global-border;
  background: $form-background;
  color: $form-font-color;
  transition: $form-transition;
  border-radius: $global-border-radius;
  width: 100%;
  position: relative;
  box-shadow: $form-box-shadow;

  @if (mixin-exists(hook-form)) {
    @include hook-form();
  }

  // Focus state
  &:focus {
    border-color: $form-focus-border-color;
    outline: 0;
    background: $form-background;
    box-shadow: $form-focus-box-shadow;
    color: $form-font-color;
    z-index: 1;

    @if (mixin-exists(hook-form-focus)) {
      @include hook-form-focus();
    }
  }

  // Disabled state
  &:disabled {
    opacity: $global-disabled-opacity;
    border-color: $global-border;
    background-color: $form-disabled-background;
    color: $form-font-color;
    cursor: not-allowed;
    user-select: none;

    @if (mixin-exists(hook-form-disabled)) {
      @include hook-form-disabled();
    }
  }

  .is-notValid & {
    border-color: $global-danger;
    box-shadow: $form-focus-error-box-shadow;
  }

  @if $global-contrast-enable and
    $form-contrast-enable and
    $form-contrast-input-enable {
    .u-contrast & {
      background: $form-contrast-background;
      border: 1px solid $global-contrast;
      color: $global-contrast;
      box-shadow: none;

      &:focus {
        border-color: $global-contrast;
        background: $form-contrast-background-focus;
        box-shadow: $form-contrast-focus-box-shadow;
      }

      &:disabled {
        background-color: $form-contrast-background;
        border-color: $global-contrast;
        color: $global-contrast;
      }
    }
  }
}

@mixin form-select-arrow() {
  content: '';
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  right: $form-padding-horizontal;
  background-image: svg-inline(form-select-caret-down);
  width: $form-select-arrow-icon-size;
  height: $form-select-arrow-icon-size;
  background-repeat: no-repeat;
  background-size: contain;
  pointer-events: none;
  z-index: 2;
}

//
// Component
//

@mixin form() {
  // 1. Address margins set differently in Firefox/IE and Chrome/Safari/Opera.
  // 2. Remove `border-radius` in iOS.
  // 3. Correct `font` properties and `color` not being inherited.
  input,
  select,
  textarea {
    // 1
    margin: 0;
    // 2
    border-radius: 0;
    // 3
    font: inherit;
    font-size: $form-font-size;
    color: inherit;
  }

  // 1. Address inconsistent `text-transform` inheritance which is only inherit in Firefox
  // 2. Remove select arrows from IE
  select {
    text-transform: none;

    &::-ms-expand {
      // 2
      display: none;
    }
  }

  // 1. Correct `font` properties not being inherited.
  // 2. Don't inherit the `font-weight` and use `bold` instead.
  // NOTE: Both declarations don't work in Chrome, Safari and Opera.
  optgroup {
    // 1
    font: inherit;
    // 2
    font-weight: $global-font-weight-bold;
  }

  // 1. Remove default style in browsers that support `appearance`
  // 2. Apply default form styling, except for `range`, `radio`, `checkbox`, `file`,
  // `submit`, `reset`, `button` and `image`
  // 3. Removes excess padding in IE 8/9/10.
  // 4. Improves consistency of cursor style for clickable elements
  // 5. Removes inner padding and border in Firefox 4+.
  // 6. Fix the cursor style for Chrome's increment/decrement buttons. For certain
  // `font-size` values of the `input`, it causes the cursor style of the
  // decrement button to change from `default` to `text`.
  // 7. Remove inner padding and search cancel button in Chrome, Safari and Opera on OS X.
  // 8. Vertical alignment
  input {
    // 1
    &:not([type]),
    &[type='text'],
    &[type='password'],
    &[type='email'],
    &[type='url'],
    &[type='search'],
    &[type='tel'],
    &[type='number'],
    &[type='datetime'],
    &[type='range'] {
      appearance: none;
    }

    // 2
    &:not([type]),
    &[type='text'],
    &[type='text'],
    &[type='password'],
    &[type='datetime'],
    &[type='datetime-local'],
    &[type='date'],
    &[type='month'],
    &[type='time'],
    &[type='week'],
    &[type='number'],
    &[type='email'],
    &[type='url'],
    &[type='search'],
    &[type='tel'],
    &[type='color'] {
      @include form-input-styles();
    }

    &[type='checkbox'],
    &[type='radio'] {
      // 3
      padding: 0;

      // 4
      &:not(:disabled) {
        cursor: pointer;
      }
    }

    // 5
    &::-moz-focus-inner {
      bottom: 0;
      padding: 0;
    }

    // 6
    &[type='number'] {
      &::-webkit-inner-spin-button,
      &::-webkit-outer-spin-button {
        height: auto;
      }
    }

    // 7
    &[type='search'] {
      &::-webkit-search-cancel-button,
      &::-webkit-search-decoration {
        appearance: none;
      }
    }

    // 8
    &:not([type='radio'], [type='checkbox']) {
      select {
        vertical-align: middle;
      }
    }
  }

  // Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
  [type='search']::-webkit-search-cancel-button,
  [type='search']::-webkit-search-decoration {
    appearance: none;
  }

  //
  // 1. Correct the inability to style clickable types in iOS and Safari.
  // 2. Change font properties to `inherit` in Safari.
  //
  ::-webkit-file-upload-button {
    // 1
    appearance: button;
    // 2
    font: inherit;
  }

  // Remove clear button in IE on inputs
  ::-ms-clear {
    display: none;
  }

  // Define consistent border, margin, and padding.
  fieldset {
    border: 0;
    margin: 0;
    padding: 0;
  }

  // Removes `box-shadow` for invalid controls in Firefox.
  :invalid {
    box-shadow: none;
  }

  //
  // Controls
  //

  // 1. Remove default style in browsers that support `appearance`
  select,
  textarea {
    @include form-input-styles();

    appearance: none; // 1
  }

  // 1. Remove default vertical scrollbar in IE 8/9/10/11.
  // 2. Improve readability and alignment in all browsers.
  // 3. Only allow vertical resizing
  // 4. Force minimum height
  // 5. Allow `textarea` to be controlled via [row] more explicitly
  // 6. Style
  textarea {
    // 1
    overflow: auto;
    // 2
    vertical-align: top;
    // 3
    resize: vertical;
    // 4
    min-height: $form-textarea-min-height;
    // 5
    height: auto;
    // 6
    padding: $form-textarea-padding;
    // 7
    max-height: $form-textarea-max-height;
  }

  //
  // Placeholders
  //

  // 1. Removes placeholder transparency in Firefox
  ::placeholder {
    opacity: 1; // 1
    color: $form-placeholder-color;
    text-overflow: hidden;

    &:disabled {
      color: $form-font-color;
    }
  }

  @if $global-contrast-enable and
    $form-contrast-enable and
    $form-contrast-input-enable {
    .u-contrast {
      ::placeholder {
        color: $global-contrast-muted;

        &:disabled {
          color: $global-contrast;
        }
      }
    }
  }

  // Prefix
  .form-prefix-wrapper {
    position: relative;

    input {
      padding-left:
        (
          $form-padding-horizontal + $global-font-size + $global-whitespace-small
        );
    }
  }

  .form-prefix-content {
    color: $global-muted;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    left: $form-padding-horizontal;
    z-index: 2;

    @if $global-contrast-enable and
      $form-contrast-enable and
      $form-contrast-input-prefix-enable {
      .u-contrast & {
        color: $global-contrast-muted;
      }
    }
  }

  // 1. Behave like block element
  // 2. Correct `color` not being inherited in IE 8/9/10/11.
  // 3. Remove padding
  // 4. `margin-bottom` is not working in Safari and Opera.
  //    Using `padding` and :after instead to create the border
  legend {
    // 1
    width: 100%;
    // 2
    border: 0;
    // 3
    padding: 0;
    // 4
    padding-bottom: $form-legend-spacing;
    font-size: $global-font-size;
    font-weight: $global-font-weight-bold;
    color: $global-muted;
    position: relative;

    @if (mixin-exists(hook-form-legend)) {
      @include hook-form-legend();
    }

    &::after {
      content: '';
      position: absolute;
      top: 50%;
      transform:
        translateY(
          (($form-legend-spacing - $form-legend-line-thickness) / -2)
        );
      width: 100%;
      background: $form-legend-line-background;
      height: $form-legend-line-thickness;
      margin-left: $form-legend-line-space;
    }
  }

  //
  // Label
  // Used when not utilizing float label pattern
  //

  // 1.Behave like block-level element
  // 2. Style
  @include selector-placeholder('.form-label') {
    // 1
    display: block;
    // 2
    font-size: $form-font-size;
    font-weight: $global-font-weight-bold;
    line-height: $global-line-height-small;
    margin-bottom: $global-whitespace-small;
    position: relative;
  }

  .form-group {
    &.is-required,
    &.is-valid,
    &.is-notValid {
      .form-label::after {
        content: '';
        display: inline-block;
        background-repeat: no-repeat;
        width: $form-label-icon-size;
        height: $form-label-icon-size;
        background-size: contain;
        margin-left: $global-whitespace-xsmall;
        position: relative;
        top: -0.25em;
      }
    }

    &.is-required {
      .form-label::after {
        background-image: svg-inline(form-required);
      }
    }

    &.is-valid {
      .form-label::after {
        background-image: svg-inline(form-valid);
      }
    }

    &.is-notValid {
      .form-label::after {
        background-image: svg-inline(form-notValid);
      }
    }
  }

  // Form spacing
  * + .form-group {
    margin-top: $global-whitespace-regular;

    .form--largeGutter & {
      margin-top: $global-whitespace-large;
    }

    .form--xlargeGutter & {
      margin-top: $global-whitespace-xlarge;
    }
  }

  // Form group combo
  .form-groupCombo {
    display: flex;

    // 1. Nested input groups should be 100% width by default
    > * {
      width: 100%; // 1

      &:first-child {
        input {
          border-top-right-radius: 0;
          border-bottom-right-radius: 0;
        }
      }

      // Remove top spacing on form groups
      + * {
        margin-top: 0;
      }

      &:not(:first-child) {
        margin-left: -$form-border-width;

        input {
          border-top-left-radius: 0;
          border-bottom-left-radius: 0;
        }
      }
    }
  }

  //
  // Radio
  //

  .form-radio {
    display: inline-flex;
    align-items: center;
    font-size: $form-font-size;

    input {
      @include u-srOnly();

      &:checked {
        + label {
          &::before {
            border-color: $global-primary;
          }

          &::after {
            content: '';
            background: $global-primary;
            width: $form-radio-icon-size;
            height: $form-radio-icon-size;
            background-repeat: no-repeat;
            background-size: contain;
            border-radius: 50%;
            display: inline-block;
            position: absolute;
            left: (($form-radio-size - $form-radio-icon-size) / 2);
            top: 50%;
            transform: translateY(-50%);
          }
        }
      }

      &:disabled {
        + label {
          opacity: $global-disabled-opacity;
          cursor: not-allowed;

          &::before {
            background-color: $form-disabled-background;
          }
        }
      }
    }

    label {
      cursor: pointer;
      user-select: none;
      padding-left: ($form-checkbox-size + $form-checkbox-label-spacing);
      position: relative;
      line-height: 1;

      &::before {
        content: '';
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        border: 1px solid $global-border;
        border-radius: 50%;
        height: $form-checkbox-size;
        width: $form-checkbox-size;
        box-shadow: $form-box-shadow;
      }
    }

    @if $global-contrast-enable and
      $form-contrast-enable and
      $form-contrast-radio-enable {
      .u-contrast & {
        input {
          + label {
            &::before {
              border-color: $global-contrast;
              box-shadow: none;
            }

            &::after {
              background: $global-contrast;
            }
          }

          &:disabled {
            + label {
              &::before {
                background-color: $form-contrast-background;
              }
            }
          }
        }
      }
    }

    @if (mixin-exists(hook-form-radio)) {
      @include hook-form-radio();
    }
  }

  //
  // Checkbox
  //

  .form-checkbox {
    display: inline-flex;
    align-items: center;
    font-size: $form-font-size;

    input {
      @include u-srOnly();

      &:checked {
        + label {
          &::before {
            border-color: $global-primary;
          }

          &::after {
            content: '';
            background-image: svg-inline(form-check);
            width: $form-checkbox-icon-size;
            height: $form-checkbox-icon-size;
            background-repeat: no-repeat;
            background-size: contain;
            display: inline-block;
            position: absolute;
            left: (($form-checkbox-size - $form-checkbox-icon-size) / 2);
            top: 50%;
            transform: translateY(-50%);
            z-index: 2;
          }
        }
      }

      &:disabled {
        + label {
          opacity: $global-disabled-opacity;
          cursor: not-allowed;

          &::before {
            background-color: $form-disabled-background;
          }
        }
      }
    }

    label {
      cursor: pointer;
      user-select: none;
      padding-left: ($form-checkbox-size + $form-checkbox-label-spacing);
      position: relative;
      line-height: 1;

      &::before {
        content: '';
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        border: 1px solid $global-border;
        border-radius: $global-border-radius;
        height: $form-checkbox-size;
        width: $form-checkbox-size;
        box-shadow: $form-box-shadow;
      }
    }

    // Align-top modifier
    &--top {
      align-items: flex-start;

      input {
        &:checked {
          + label {
            &::after {
              top: ($form-checkbox-size / 2);
            }
          }
        }
      }

      label {
        &::before {
          top: 0;
          transform: none;
        }
      }
    }

    @if $global-contrast-enable and
      $form-contrast-enable and
      $form-contrast-checkbox-enable {
      .u-contrast & {
        input {
          + label {
            &::before {
              border-color: $global-contrast;
              box-shadow: none;
            }

            &::after {
              background-image: svg-inline(form-check-contrast);
            }
          }

          &:disabled {
            + label {
              &::before {
                background-color: $form-contrast-background;
              }
            }
          }
        }
      }
    }

    @if (mixin-exists(hook-form-checkbox)) {
      @include hook-form-checkbox();
    }
  }

  //
  // Select
  //

  @include selector-placeholder('.form-select') {
    position: relative;

    select {
      padding: $form-select-arrow-surround-padding;
    }

    &:not(.form-select--multiple) {
      &::after {
        @include form-select-arrow();
      }
    }

    @if $global-contrast-enable and
      $form-contrast-enable and
      $form-contrast-select-enable {
      .u-contrast & {
        select {
          option {
            background: $global-contrast;
            color: $form-font-color;
          }
        }

        &::after {
          background-image: svg-inline(form-select-caret-down-contrast);
        }
      }
    }

    &--multiple {
      height: auto;

      select {
        padding: 0;
        height: auto;
        max-height: $form-select-multiple-max-height;
      }

      option {
        padding: $form-padding-horizontal;
      }
    }

    @if (mixin-exists(hook-form-select)) {
      @include hook-form-select();
    }
  }

  //
  // Footer
  //

  .form-footer {
    font-size: $global-font-size-small;
    line-height: $global-line-height-small;

    @media (min-width: $global-viewport-medium) {
      display: flex;
      width: 100%;
    }
  }

  .form-footerExplanation {
    color: $global-muted;
    margin-top: $global-whitespace-xsmall;

    @if $global-contrast-enable and
      $form-contrast-enable and
      $form-contrast-input-enable {
      .u-contrast & {
        color: $global-contrast-muted;
      }
    }

    @media (min-width: $global-viewport-medium) {
      margin-right: $global-whitespace-small;
    }
  }

  .form-footerError {
    color: $global-danger;
    margin-top: $global-whitespace-xsmall;

    @media (min-width: $global-viewport-medium) {
      margin-left: auto;
    }
  }

  @if (mixin-exists(hook-form-misc)) {
    @include hook-form-misc();
  }
}
